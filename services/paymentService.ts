
import { PREMIUM_PRICE } from '../constants';

/**
 * This service simulates a backend server.
 * In a real-world application, you would replace this function
 * with an actual HTTP request to your backend endpoint. The backend
 * would then interact with the Stripe API using your secret key.
 */

interface PaymentIntentResponse {
  clientSecret: string;
}

/**
 * Simulates creating a Stripe PaymentIntent on a backend server.
 *
 * This function is a stand-in for a backend API call. In a real application,
 * this is where you would make a `fetch` request to your server.
 * The server would then use the Stripe Node.js library and your secret key
 * to create a new PaymentIntent, returning its client_secret.
 *
 * @returns {Promise<{ clientSecret: string }>} - A promise that resolves with a mock client secret.
 */
export const createPaymentIntent = async (): Promise<PaymentIntentResponse> => {
  console.log("Simulating backend call to create PaymentIntent...");

  // We simulate a network delay to mimic a real API call.
  await new Promise(resolve => setTimeout(resolve, 1000));

  // This is a FAKE client secret for demonstration purposes.
  // A real client secret is generated by Stripe's API on your backend
  // and looks like `pi_..._secret_...`.
  // Using a fake one here allows the UI to proceed without a real backend.
  const mockClientSecret = `pi_3kflpk2eZvKYlo2C0Qj4Lq4f_secret_dummy_secret_for_ui_simulation`;
  
  console.log(`Simulated backend returned a client secret for a $${PREMIUM_PRICE} payment.`);

  return { clientSecret: mockClientSecret };
};
